{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as FileSaver from 'file-saver';\nimport { MainComponent } from \"./main/main.component\";\nimport { HttpEventType } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./Dataservice/dataservice.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"./tfile/tfile.component\";\nfunction AppComponent_span_36_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function AppComponent_span_36_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.changeToParentFolder());\n    });\n    i0.ɵɵtext(1, \" arrow_back \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-tfile\", 30);\n    i0.ɵɵlistener(\"fileDownLoad\", function AppComponent_div_40_Template_app_tfile_fileDownLoad_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.fileDownLoad($event));\n    })(\"changeFolder\", function AppComponent_div_40_Template_app_tfile_changeFolder_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.changeFolder($event));\n    })(\"deleteFileFolder\", function AppComponent_div_40_Template_app_tfile_deleteFileFolder_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.deleteFileFolder($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const node_r7 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"file\", node_r7)(\"currentFolder\", ctx_r3.currentFolder);\n  }\n}\nfunction AppComponent_form_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 31)(1, \"app-tfile\", 32);\n    i0.ɵɵlistener(\"createNewFolder\", function AppComponent_form_41_Template_app_tfile_createNewFolder_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.doNewFolder($event));\n    })(\"cancelNewFolder\", function AppComponent_form_41_Template_app_tfile_cancelNewFolder_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.doCancelNewFolder());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"file\", ctx_r4.newFolderPNode)(\"newFolder\", true)(\"currentFolder\", ctx_r4.currentFolder);\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    get message() {\n      return this._message;\n    }\n    set message(value) {\n      this._message = this._errorMessage == \"\" ? value : \"\";\n    }\n    get errorMessage() {\n      return this._errorMessage;\n    }\n    set errorMessage(val) {\n      this._errorMessage = val;\n      if (val != \"\") {\n        this._message = \"\"; // clear normal message when error message is active\n        setTimeout(() => this._errorMessage = \"\", this.messageTimeout); // clear error afterwards\n      }\n    }\n    // sets the normal message but clears it after sometime\n    autoResetMsg(message) {\n      this.message = message;\n      setTimeout(() => this.message = \"\", this.messageTimeout);\n    }\n    get showBackArrow() {\n      return this.currentFolder != this.Separator;\n    }\n    get currentFolder() {\n      return this._currentFolder;\n    }\n    set currentFolder(val) {\n      if (val == '') val = this.Separator;\n      if (!val.startsWith(this.Separator)) val = this.Separator + val;\n      if (!val.endsWith(this.Separator)) val += this.Separator;\n      this._currentFolder = val;\n    }\n    getBaseUrl() {\n      return document.getElementsByTagName('base')[0].href;\n    }\n    constructor(_data, location) {\n      this._data = _data;\n      this.location = location;\n      this.rootPath = \"/\";\n      this._message = \"\";\n      this.pathNodes = [];\n      this.newFolderPNode = undefined;\n      this.customerCode = \"\";\n      this.messageTimeout = 1500; // milliseconds\n      this._errorMessage = \"\";\n      this._currentFolder = this.rootPath;\n      this.Separator = \"/\";\n    }\n    removeTrailingSlash(str) {\n      return str.endsWith(\"/\") ? str.slice(0, str.length - 1) : str;\n    }\n    removeStartingSlash(str) {\n      return str.startsWith(\"/\") ? str.slice(1, str.length) : str;\n    }\n    cmpFolders(a, b) {\n      if (a.isFolder && !b.isFolder) return -1;\n      if (!a.isFolder && b.isFolder) return 1;\n      if (a.isFolder && b.isFolder || !a.isFolder && !b.isFolder) {\n        return a.createdOn > b.createdOn ? 1 : -1;\n      }\n      return 0;\n    }\n    refresh() {\n      this.newFolderPNode = undefined;\n      this.inputFolderNames = null;\n      this.inputFileNames = null;\n      this.message = \"Fetching ...\";\n      // this.errorMessage = \"\"\n      console.log(`Refreshing ...`);\n      if (this.customerCode == \"\") {\n        this._data.GetCustomerCode().subscribe({\n          next: customerCode => {\n            // console.log(`Customer code assigned ${customerCode}`)\n            this.customerCode = customerCode;\n          },\n          error: err => {\n            console.log(`Error : ${err.message}`);\n            this.customerCode = \"\";\n          },\n          complete: () => {\n            // console.log(\"completed\")\n          }\n        });\n      }\n      this.currentFolder = this.getCurrentPathName();\n      if (this.currentFolder === \"\") {\n        this.currentFolder = \"/\";\n      }\n      let currentFolderLength = this.currentFolder.length;\n      this._data.GetFileList(this.currentFolder).pipe(map(nodes => nodes.map(node => {\n        node.name = node.name.slice(currentFolderLength); // remove the path from the filename\n        node.name = this.removeStartingSlash(node.name);\n        return node;\n      })), map(nodes => nodes.sort((a, b) => this.cmpFolders(a, b)))).subscribe({\n        next: nodes => this.pathNodes = nodes,\n        error: err => {\n          this.errorMessage = ` ${this.currentFolder}   not found.`;\n          this.doChangeFolder(\"\");\n        },\n        complete: () => this.message = \"\"\n      });\n    }\n    combinePaths(path1, path2) {\n      if (path1 == \"\") {\n        return path2;\n      }\n      if (path2 == \"\") {\n        return path1;\n      }\n      let p1 = path1.endsWith(\"/\");\n      let p2 = path2.startsWith(\"/\");\n      if (p1 && p2)\n        // both has slashes\n        return `${this.removeTrailingSlash(path1)}${path2}`;else if (p1 && !p2 || !p1 && p2)\n        // only one of them has a slash\n        return path1 + path2;\n      return `${path1}/${path2}`; // default\n    }\n    downloadProgress(fullFileName, ev) {\n      if (ev.type === HttpEventType.DownloadProgress) {\n        if (ev.loaded && ev.total) {\n          const percentDone = Math.round(100 * ev.loaded / ev.total);\n          if (ev.loaded >= ev.total) {\n            // done ?\n            this.message = `Downloaded ${fullFileName} - Saving`;\n          } else {\n            this.message = `Downloading ${fullFileName} ${percentDone}%`;\n          }\n        }\n      }\n    }\n    removeQuotes(fn) {\n      if (fn.startsWith('\"') && fn.endsWith('\"')) return fn.slice(1, -1);else return fn;\n    }\n    // get the suggested filename from content disposition header\n    // it is preferable to get it from UTF-8 encoded field name filename*\n    // otherwise take it from filename field\n    // the value may or may not be quoted. if quoted remove the quote\n    getFilenameFromContentDisposition(contentDisposition) {\n      const match = contentDisposition.match(/filename\\*=UTF-8''([^;]+)/);\n      if (match && match.length > 1) {\n        return this.removeQuotes(decodeURIComponent(match[1]));\n      }\n      const filenameMatch = contentDisposition.match(/filename=\"([^;]+)/);\n      if (filenameMatch && filenameMatch.length > 1) {\n        return this.removeQuotes(filenameMatch[1]);\n      }\n      return \"\"; // string empty if content disposition is empty\n    }\n    fileDownLoad($event) {\n      let fullFileName = this.combinePaths(this.currentFolder, $event);\n      this.message = `Preparing to download ${fullFileName} ...`;\n      this._data.DownloadFile(fullFileName).subscribe({\n        next: event => {\n          this.downloadProgress(fullFileName, event);\n          if (event.type === HttpEventType.Response) {\n            const contentDisposition = event.headers.get('content-disposition');\n            if (contentDisposition) {\n              const filename = this.getFilenameFromContentDisposition(contentDisposition);\n              if (event.body) FileSaver.saveAs(event.body, filename);\n            } else {\n              if (event.body) FileSaver.saveAs(event.body, $event);\n            }\n          }\n        },\n        error: err => this.errorMessage = `Error: Download ${fullFileName} - ${err.message}`,\n        complete: () => this.autoResetMsg(`Downloaded ${fullFileName}`)\n      });\n    }\n    getCurrentPathName() {\n      // console.log( `window.location.href ${window.location.pathname}`)\n      return decodeURIComponent(window.location.pathname);\n    }\n    doChangeFolder(newFolder) {\n      let oldFolder = this.currentFolder;\n      this.currentFolder = newFolder.trim();\n      if (oldFolder != this.currentFolder) {\n        // console.log(`Changing folder from --${oldFolder}-- to --${newFolder.trim()}--  `)\n        this.location.replaceState(this.currentFolder);\n        this.refresh();\n      }\n    }\n    changeFolder($event) {\n      this.doChangeFolder(this.currentFolder + $event);\n      // this.currentFolder +=  $event\n      // console.log (`Changing folder to ${this.currentFolder}`)\n      // this.refresh()\n    }\n    changeToParentFolder() {\n      if (this.currentFolder == \"/\") {\n        this.refresh();\n        return;\n      }\n      let str = this.removeTrailingSlash(this.currentFolder);\n      let toks = str.split(\"/\");\n      let pth = toks.slice(0, toks.length - 1);\n      this.doChangeFolder(pth.join(\"/\"));\n      // this.currentFolder = pth.join(\"/\")\n      // console.log (`Changing folder to ${this.currentFolder}`)\n      //\n      // this.refresh()\n    }\n    removeLeadingAndTrailingSlash(str) {\n      return this.removeTrailingSlash(this.removeStartingSlash(str));\n    }\n    validNewName(fileName) {\n      const invalidCharsRegex = /[<>:\"\\/\\\\|?*\\x00-\\x1F]/g; // Regex to match invalid characters\n      const reservedNames = ['con', 'prn', 'aux', 'nul', 'com1', 'com2', 'com3', 'com4', 'com5', 'com6', 'com7', 'com8', 'com9', 'lpt1', 'lpt2', 'lpt3', 'lpt4', 'lpt5', 'lpt6', 'lpt7', 'lpt8', 'lpt9']; // Reserved file names\n      if (fileName.match(invalidCharsRegex)) {\n        return false; // Contains invalid characters\n      }\n      if (reservedNames.includes(fileName.toLowerCase())) {\n        return false; // Matches a reserved name\n      }\n      return true;\n    }\n    //\n    // validNewName (fname:string) {\n    //   if (fname == \"\") return false\n    //   if (fname == \".\" || fname == \"..\") return false\n    //   const Allowed = `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-()+0123456789.~ `\n    //   return Array.from(fname).every(s => Allowed.indexOf(s) != -1)\n    // }\n    newFolderButtonClicked() {\n      this.newFolderPNode = {\n        name: \"\",\n        isFolder: true,\n        size: 0,\n        createdOn: new Date()\n      };\n    }\n    doCancelNewFolder() {\n      this.newFolderPNode = undefined;\n      this.refresh();\n    }\n    doNewFolder($event) {\n      this.newFolderPNode = undefined;\n      if ($event == \"\") {\n        this.refresh();\n        return;\n      }\n      if (!this.validNewName($event)) {\n        this.errorMessage = \"Invalid characters in folder name\";\n        this.refresh();\n        return;\n      }\n      const newFolderPath = this.combinePaths(this.currentFolder, $event);\n      this.message = `Creating new folder ${newFolderPath} `;\n      this.errorMessage = \"\";\n      // console.log (`creating NewFolder  ${newFolderPath}`)\n      this._data.CreateNewfolder(newFolderPath).subscribe({\n        next: _str => {},\n        error: err => this.errorMessage = `Error : New folder ${newFolderPath} - ${err.message}`,\n        complete: () => this.refresh()\n      });\n    }\n    uploadProgress(files, ev) {\n      if (ev.type === HttpEventType.UploadProgress) {\n        let fileName = files.length == 1 ? files[0].name : `${files.length} Files.`;\n        if (ev.loaded && ev.total) {\n          const percentDone = Math.round(100 * ev.loaded / ev.total);\n          if (percentDone > 99.0) {\n            // done ?\n            this.message = `Uploaded ${fileName} - Saving`;\n          } else {\n            this.message = `Uploading ${fileName} ${percentDone}%`;\n          }\n        }\n      }\n    }\n    doFileUpload(files) {\n      // console.log(\"doFileUpload \", files)\n      if (files && files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          if (!this.validNewName(files[i].name)) {\n            this.errorMessage = `Invalid file name ${files[i].name}`;\n            return;\n          }\n        }\n        this.message = files.length > 1 ? `Uploading ${files.length} files` : `Uploading ${files[0].name}`;\n        this._data.UploadFiles(this.currentFolder, files).subscribe({\n          next: n => {\n            this.uploadProgress(files, n);\n          },\n          error: err => this.errorMessage = 'Error: File upload : ' + err.message,\n          complete: () => {\n            this.refresh();\n          }\n        });\n      }\n    }\n    doLogout() {\n      MainComponent.LogOut();\n    }\n    ngOnInit() {\n      this.refresh();\n    }\n    deleteFileFolder($event) {\n      if (!$event) return;\n      let fullName = this.combinePaths(this.currentFolder, $event.name);\n      // console.log(`Delete  ${fullName}`)\n      if ($event.isFolder) {\n        this._data.DeleteFolder(fullName).subscribe({\n          next: s => {\n            console.log(`delete  folder: `, s);\n          },\n          error: err => {\n            console.log(`delete folder Error: `, err.message);\n          },\n          complete: () => {\n            this.refresh();\n          }\n        });\n      } else {\n        this._data.DeleteFile(fullName).subscribe({\n          next: s => {\n            console.log(`delete file : `, s);\n          },\n          error: err => {\n            console.log(`delete file Error: `, err.message);\n          },\n          complete: () => {\n            this.refresh();\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.Location));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 42,\n      vars: 11,\n      consts: [[1, \"gridcontainer\"], [1, \"ccode\"], [1, \"code\"], [1, \"message\", 3, \"ngClass\"], [1, \"Success\"], [1, \"Errors\"], [1, \"toolbar\"], [1, \"newFolder\", 3, \"click\"], [1, \"material-icons-outlined\", \"newFolderIcon\", \"grow\"], [1, \"newFolderLabel\"], [\"onclick\", \"document.getElementById('attachmentuploadfile').click()\", 1, \"upload\"], [1, \"material-icons\", \"uploadIcon\", \"grow\"], [\"id\", \"attachmentuploadfile\", \"type\", \"file\", \"multiple\", \"\", 1, \"t2elem\", \"noborder\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"file\", \"\"], [1, \"uploadFileLabel\"], [\"onclick\", \"document.getElementById('attachmentuploadfolder').click()\", 1, \"uploadFolder\"], [1, \"material-icons\", \"uploadFolderIcon\", \"grow\"], [\"id\", \"attachmentuploadfolder\", \"type\", \"file\", \"webkitdirectory\", \"\", \"multiple\", \"\", 1, \"t2elem\", \"noborder\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"folder\", \"\"], [1, \"uploadFileFolderLabel\"], [1, \"logout\", \"alignright\", 3, \"click\"], [1, \"material-icons\", \"logoutIcon\", \"grow\"], [1, \"logoutLabel\"], [\"title\", \"Go to parent folder\", 1, \"fullpath\"], [\"class\", \"material-icons-outlined backSpan grow\", 3, \"click\", 4, \"ngIf\"], [1, \"currentFolder\"], [1, \"filenames\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"newFolderInput\", 4, \"ngIf\"], [1, \"material-icons-outlined\", \"backSpan\", \"grow\", 3, \"click\"], [3, \"file\", \"currentFolder\", \"fileDownLoad\", \"changeFolder\", \"deleteFileFolder\"], [1, \"newFolderInput\"], [3, \"file\", \"newFolder\", \"currentFolder\", \"createNewFolder\", \"cancelNewFolder\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r15 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"span\", 4);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 3)(8, \"span\", 5);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 6)(11, \"div\", 7);\n          i0.ɵɵlistener(\"click\", function AppComponent_Template_div_click_11_listener() {\n            return ctx.newFolderButtonClicked();\n          });\n          i0.ɵɵelementStart(12, \"span\", 8);\n          i0.ɵɵtext(13, \"create_new_folder\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"p\", 9);\n          i0.ɵɵtext(15, \"New Folder\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"div\", 10)(17, \"span\", 11);\n          i0.ɵɵtext(18, \"upload_file \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"input\", 12, 13);\n          i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_19_listener($event) {\n            return ctx.inputFileNames = $event;\n          })(\"change\", function AppComponent_Template_input_change_19_listener() {\n            i0.ɵɵrestoreView(_r15);\n            const _r0 = i0.ɵɵreference(20);\n            return i0.ɵɵresetView(ctx.doFileUpload(_r0.files));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"p\", 14);\n          i0.ɵɵtext(22, \"Upload File\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"div\", 15)(24, \"span\", 16);\n          i0.ɵɵtext(25, \"drive_folder_upload \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"input\", 17, 18);\n          i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_26_listener($event) {\n            return ctx.inputFolderNames = $event;\n          })(\"change\", function AppComponent_Template_input_change_26_listener() {\n            i0.ɵɵrestoreView(_r15);\n            const _r1 = i0.ɵɵreference(27);\n            return i0.ɵɵresetView(ctx.doFileUpload(_r1.files));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"p\", 19);\n          i0.ɵɵtext(29, \"Upload Folder\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(30, \"div\", 20);\n          i0.ɵɵlistener(\"click\", function AppComponent_Template_div_click_30_listener() {\n            return ctx.doLogout();\n          });\n          i0.ɵɵelementStart(31, \"span\", 21);\n          i0.ɵɵtext(32, \" logout \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"p\", 22);\n          i0.ɵɵtext(34, \"Logout\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(35, \"div\", 23);\n          i0.ɵɵtemplate(36, AppComponent_span_36_Template, 2, 0, \"span\", 24);\n          i0.ɵɵelementStart(37, \"span\", 25);\n          i0.ɵɵtext(38);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(39, \"div\", 26);\n          i0.ɵɵtemplate(40, AppComponent_div_40_Template, 2, 2, \"div\", 27);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(41, AppComponent_form_41_Template, 2, 3, \"form\", 28);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" \", ctx.customerCode, \"\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", ctx.message == \"\" ? \"hidden\" : \"visible\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.message);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", ctx.errorMessage == \"\" ? \"hidden\" : \"visible\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.errorMessage);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngModel\", ctx.inputFileNames);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngModel\", ctx.inputFolderNames);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngIf\", ctx.showBackArrow);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.currentFolder, \" \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.pathNodes);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.newFolderPNode);\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm, i4.TFileComponent],\n      styles: [\"body[_ngcontent-%COMP%]{height:100%;font-family:Roboto,Helvetica,sans-serif;background-repeat:no-repeat}div[_ngcontent-%COMP%]{font-family:Roboto,Helvetica,sans-serif}h1[_ngcontent-%COMP%], .title[_ngcontent-%COMP%]{margin-left:10px;margin-top:10px;font-size:32pt;font-stretch:ultra-expanded;font-weight:100}.subtitle[_ngcontent-%COMP%]{margin-left:10px;margin-bottom:10px;font-size:14pt;font-stretch:ultra-expanded;font-weight:100}html[_ngcontent-%COMP%], body[_ngcontent-%COMP%]{height:100%}body[_ngcontent-%COMP%]{margin:0;font-family:Roboto,Helvetica Neue,sans-serif}.t5group[_ngcontent-%COMP%]{display:grid;height:100%;grid-column-gap:10px;grid-template-columns:4rem 16rem auto;grid-template-areas:\\\"t1elem t2elem t5elem\\\" \\\"t3elem t4elem .\\\"}.t4group[_ngcontent-%COMP%]{display:grid;height:100%;grid-column-gap:10px;grid-template-columns:4rem 16rem;grid-template-areas:\\\"t1elem t2elem \\\" \\\"t3elem t4elem \\\"}.t1elem[_ngcontent-%COMP%]{grid-area:t1elem;margin:0;align-self:end}label.t1elem[_ngcontent-%COMP%]{font-size:14px;color:#556b2f}.t2elem[_ngcontent-%COMP%]{grid-area:t2elem;padding-right:.5rem;padding-left:.5rem;align-self:end}textarea.t2elem[_ngcontent-%COMP%], input.t2elem[_ngcontent-%COMP%]{background:transparent;border-bottom:1px solid #42a948;border-left:0px;border-right:0px;border-top:0px;border-radius:0}.t3elem[_ngcontent-%COMP%]{grid-area:t3elem;font-size:14px;margin:0;align-self:end}.t4elem[_ngcontent-%COMP%]{grid-area:t4elem;align-self:end;justify-self:center}.t5elem[_ngcontent-%COMP%]{grid-area:t5elem;align-self:start;justify-self:left}.aligncenter[_ngcontent-%COMP%]{align-self:center;text-align:center}.alignleft[_ngcontent-%COMP%]{align-self:start;text-align:left;justify-self:left}.alignright[_ngcontent-%COMP%]{text-align:right;justify-self:right}.gridcontainer[_ngcontent-%COMP%]{display:grid;grid-column-gap:5px;grid-row-gap:5px;grid-template-columns:25px 20fr 10fr 10fr;grid-template-areas:\\\".          message       message        .\\\" \\\"ccode          toolbar       toolbar        .\\\" \\\"ccode         fullpath      fullpath       .\\\" \\\"ccode          filenames     filenames       .\\\" \\\".          newFolderInput newFolderInput .\\\";padding:5px;margin-bottom:80px}.ccode[_ngcontent-%COMP%]{grid-area:ccode}.code[_ngcontent-%COMP%]{transform:translate(70px) translateY(140px) rotate(270deg);position:relative;font-size:64px;color:#ffd700d1;height:127px;z-index:-1}#attachmentuploadfolder[_ngcontent-%COMP%], #attachmentuploadfile[_ngcontent-%COMP%]{visibility:hidden;height:0px;width:0px}.toolbar[_ngcontent-%COMP%]{grid-area:toolbar;display:grid;grid-column-gap:5px;grid-row-gap:2px;grid-template-columns:10fr 10fr 10fr 10fr 15fr auto;grid-template-areas:\\\".    newFolder  upload uploadFolder logout .  .\\\"}.message[_ngcontent-%COMP%]{grid-area:message;height:20px;margin-left:120px;transition:opacity ease-in-out .25s}.Success[_ngcontent-%COMP%]{vertical-align:middle;transition:opacity ease-in-out;padding:5px;border:1px solid lightgray;border-radius:5px;background:#00800040;color:#143b83}.Errors[_ngcontent-%COMP%]{vertical-align:middle;transition:opacity ease-in-out;padding:5px;border:1px solid lightgray;border-radius:5px;background:#80000040;color:#143b83}.tismologo[_ngcontent-%COMP%]{grid-area:tismologo}.fullpath[_ngcontent-%COMP%]{grid-area:fullpath;margin-left:125px;margin-bottom:20px;border-bottom:1px solid lightgray}.currentFolder[_ngcontent-%COMP%]{color:#2f4f4f}.backButton[_ngcontent-%COMP%]{grid-area:backButton;text-align:right}.grow[_ngcontent-%COMP%]{transition:all .2s ease-in-out}.grow[_ngcontent-%COMP%]:hover{transform:scale(1.1)}.backSpan[_ngcontent-%COMP%]{border:1px solid transparent;border-radius:4px;transition:all ease .25s;color:#8e9d25;margin-right:-5px;font-size:32px}.backSpan[_ngcontent-%COMP%]:hover{color:green;cursor:pointer}.uploadFileFolderLabel[_ngcontent-%COMP%], .uploadFileLabel[_ngcontent-%COMP%], .newFolderLabel[_ngcontent-%COMP%], .logoutLabel[_ngcontent-%COMP%]{font-size:5pt;color:#2f4f4f;text-align:left}.logoutLabel[_ngcontent-%COMP%]{margin-left:8px}.uploadFileFolderLabel[_ngcontent-%COMP%], .uploadFileLabel[_ngcontent-%COMP%]{margin-left:5px}.newFolderLabel[_ngcontent-%COMP%]{margin-left:3px}.filenames[_ngcontent-%COMP%]{grid-area:filenames}.newFolderInput[_ngcontent-%COMP%]{grid-area:newFolderInput}.actions[_ngcontent-%COMP%]{grid-area:actions}.upload[_ngcontent-%COMP%]{grid-area:upload;text-align:left}.upload[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:hover{cursor:pointer}.uploadFolder[_ngcontent-%COMP%]{grid-area:uploadFolder;text-align:left}.uploadFolder[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:hover{cursor:pointer}.newFolder[_ngcontent-%COMP%]{grid-area:newFolder;text-align:left}.newFolder[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:hover{cursor:pointer}.newFolderIcon[_ngcontent-%COMP%], .uploadFolderIcon[_ngcontent-%COMP%], .uploadIcon[_ngcontent-%COMP%]{font-size:32px;text-align:left;color:#8e9d25}.newFolderIcon[_ngcontent-%COMP%]:hover, .uploadFolderIcon[_ngcontent-%COMP%]:hover, .uploadIcon[_ngcontent-%COMP%]:hover{cursor:pointer;color:#006400}.footer[_ngcontent-%COMP%]{grid-area:footer}.logout[_ngcontent-%COMP%]{grid-area:logout}.logout[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:hover{cursor:pointer}.logoutIcon[_ngcontent-%COMP%]{border:1px solid transparent;border-radius:4px;margin-left:5px;margin-right:5px;font-size:32px;color:#8e9d25}.logoutIcon[_ngcontent-%COMP%]:hover{cursor:pointer;color:#006400}.error-color[_ngcontent-%COMP%]{color:salmon}.hidden[_ngcontent-%COMP%]{opacity:0}.visible[_ngcontent-%COMP%]{opacity:1}\"]\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}