{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    http;\n    baseServerAPIUrl;\n    isformdata = false;\n    static authString = '';\n    // get formDataHttpOptions() {\n    //   return {\n    //     headers: new HttpHeaders({\n    //       // 'Content-Type': 'multipart/form-data',\n    //       Authorization: 'Bearer ' + DataService.authString\n    //     })\n    //   };\n    // }\n    get httpOptions() {\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + DataService.authString\n        })\n      };\n    }\n    constructor(http, baseUrl) {\n      this.http = http;\n      // this.baseRawUrl = baseUrl;\n      this.baseServerAPIUrl = baseUrl.replace('4200', '5000'); // 4200 to 5000 is for development machine\n    }\n    setHttpAuthorizationHeader(authString) {\n      DataService.authString = authString;\n    }\n    Login(username, password) {\n      const params = new HttpParams({\n        fromObject: {\n          user: username,\n          pwd: password\n        }\n      });\n      return this.http.get(this.baseServerAPIUrl + \"login\", {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        params: params\n      });\n    }\n    DeleteFile(fileName) {\n      let url = this.baseServerAPIUrl + \"deleteFile/\" + encodeURIComponent(fileName);\n      return this.http.delete(url, {\n        headers: this.httpOptions.headers\n      });\n    }\n    DeleteFolder(folderName) {\n      let url = this.baseServerAPIUrl + \"deleteFolder/\" + encodeURIComponent(folderName);\n      return this.http.delete(url, {\n        headers: this.httpOptions.headers\n      });\n    }\n    CreateNewfolder(folder) {\n      const params = new HttpParams({\n        fromObject: {\n          folderName: encodeURI(folder)\n        }\n      });\n      const formData = new FormData();\n      return this.http.post(this.baseServerAPIUrl + \"createFolder\", formData, {\n        headers: this.httpOptions.headers,\n        params: params\n      });\n    }\n    getHref(filepath) {\n      return `${this.baseServerAPIUrl}download?filename=${encodeURI(filepath)}`;\n    }\n    UploadFiles(folder, filesToUpload) {\n      const params = new HttpParams({\n        fromObject: {\n          folderName: encodeURI(folder)\n        }\n      }); // query parameters\n      const endpoint = this.baseServerAPIUrl + 'upload';\n      const formData = new FormData();\n      for (let i = 0; i < filesToUpload.length; i++) {\n        let fileName = filesToUpload[i].webkitRelativePath.length != 0 ?\n        // prefer full path\n        filesToUpload[i].webkitRelativePath : filesToUpload[i].name; // else just the filename\n        formData.append('file', filesToUpload[i], fileName);\n        console.log(filesToUpload[i]);\n      }\n      //  .pipe(catchError(this.handleError));\n      return this.http.post(endpoint, formData, {\n        headers: new HttpHeaders({\n          // 'Content-Type': 'multipart/form-data',\n          Authorization: 'Bearer ' + DataService.authString\n        }),\n        params: params,\n        reportProgress: true,\n        observe: 'events'\n      });\n    }\n    DownloadFile(fileToDownload, fileDate) {\n      let fileDateStr = fileDate.toISOString();\n      const params = new HttpParams({\n        fromObject: {\n          filename: encodeURI(fileToDownload),\n          fileDate: encodeURIComponent(fileDateStr)\n        }\n      });\n      return this.http.get(this.baseServerAPIUrl + \"download\", {\n        headers: this.httpOptions.headers,\n        params: params,\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      });\n    }\n    GetCustomerCode() {\n      return this.http.get(this.baseServerAPIUrl + \"customerCode\", {\n        headers: this.httpOptions.headers\n      });\n    }\n    GetFileList(folder = \"/\") {\n      const params = new HttpParams({\n        fromObject: {\n          folderName: encodeURI(folder)\n        }\n      }); // query parameters\n      return this.http.get(this.baseServerAPIUrl + \"fileList\", {\n        headers: this.httpOptions.headers,\n        params: params\n      }).pipe(map(pnodes => pnodes.map(pnode => {\n        pnode.createdOn = new Date(pnode.createdOn); // on reception date is a string\n        return pnode;\n      })));\n    }\n    static ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}